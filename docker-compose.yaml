
services:

    proxy-manager:
        container_name: proxy-manager
        image: 'jc21/nginx-proxy-manager:latest'
        restart: unless-stopped
        ports:
        - '80:80'
        - '443:443'
        volumes:
        - ./nginx-proxy-manager:/data
        - ./nginx-proxy-manager/letsencrypt:/etc/letsencrypt
        networks:
        - internal

    homeassistant:
        container_name: homeassistant
        image: "ghcr.io/home-assistant/home-assistant:stable"
        volumes:
        - ./homeassistant/config:/config
        - /etc/localtime:/etc/localtime:ro
        - /run/dbus:/run/dbus:ro
        restart: unless-stopped
        privileged: true
        networks:
        - internal

    
    # ================================================ #
    # Authentik Identity and Access Management System  #
    # ================================================ #
    postgresql:
        image: docker.io/library/postgres:16-alpine
        restart: unless-stopped
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
            start_period: 20s
            interval: 30s
            retries: 5
            timeout: 5s
        volumes:
            - database:/var/lib/postgresql/data
        environment:
            POSTGRES_PASSWORD: ${PG_PASS:?database password required}
            POSTGRES_USER: ${PG_USER:-authentik}
            POSTGRES_DB: ${PG_DB:-authentik}
        env_file:
        - .env
        networks:
        - internal

    redis:
        image: docker.io/library/redis:alpine
        command: --save 60 1 --loglevel warning
        restart: unless-stopped
        healthcheck:
            test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
            start_period: 20s
            interval: 30s
            retries: 5
            timeout: 3s
        volumes:
        - redis:/data
        networks:
        - internal

    server:
        image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.2.1}
        restart: unless-stopped
        command: server
        environment:
            AUTHENTIK_REDIS__HOST: redis
            AUTHENTIK_POSTGRESQL__HOST: postgresql
            AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
            AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
            AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
        volumes:
            - ./authentik/media:/media
            - ./authentik/custom-templates:/templates
        env_file:
            - .env
        expose:
            - "${COMPOSE_PORT_HTTP:-9000}:9000"
            - "${COMPOSE_PORT_HTTPS:-9443}:9443"
        depends_on:
            postgresql:
                condition: service_healthy
            redis:
                condition: service_healthy
        networks:
        - internal

    worker:
        image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.2.1}
        restart: unless-stopped
        command: worker
        environment:
            AUTHENTIK_REDIS__HOST: redis
            AUTHENTIK_POSTGRESQL__HOST: postgresql
            AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
            AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
            AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
        # `user: root` and the docker socket volume are optional.
        # See more for the docker socket integration here:
        # https://goauthentik.io/docs/outposts/integrations/docker
        # Removing `user: root` also prevents the worker from fixing the permissions
        # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
        # (1000:1000 by default)
        user: root
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./authentik/media:/media
            - ./authentik/certs:/certs
            - ./authentik/custom-templates:/templates
        env_file:
            - .env
        depends_on:
            postgresql:
                condition: service_healthy
            redis:
                condition: service_healthy

        networks:
        - internal
    
    # Home Assistant Outpost
    authentik_proxy:
        container_name: hass-proxy
        image: ghcr.io/goauthentik/proxy
        # Optionally specify which networks the container should be
        # might be needed to reach the core authentik server
        # networks:
        #   - foo
        expose:
            - "9000:9000"
            - "9443:9443"
            
        environment:
            AUTHENTIK_HOST: http://server:9000
            AUTHENTIK_INSECURE: "true"
            # Change the value of the token in your .env
            AUTHENTIK_TOKEN: ${HASS_PROXY_TOKEN:-changeme}
            # Starting with 2021.9, you can optionally set this too
            # when authentik_host for internal communication doesn't match the public URL
            AUTHENTIK_HOST_BROWSER: http://auth.home.internal
        networks:
            - internal
        depends_on:
            server:
                condition: service_healthy
            worker:
                condition: service_healthy

# Volumes
volumes:
    database:
        driver: local
    redis:
        driver: local


# Networks
networks:
    internal:
        driver: bridge